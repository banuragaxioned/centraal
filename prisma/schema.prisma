// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// to be removed
model Example {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tenant {
    id         Int          @id @default(autoincrement())
    name       String
    slug       String       @unique
    status     Status       @default(PUBLISHED)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    users      User[]       @relation("UserTenants")
    client     Client[]
    project    Project[]
    milestone  Milestone[]
    task       Task[]
    timeEntry  TimeEntry[]
    userTags   UserTags[]
    allocation Allocation[]
}

model Client {
    id        Int      @id @default(autoincrement())
    name      String
    tenantId  Int
    status    Status   @default(PUBLISHED)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    project Project[]
    tenant  Tenant    @relation(fields: [tenantId], references: [id])

    @@index([tenantId])
}

model Project {
    id        Int             @id @default(autoincrement())
    name      String
    status    Status          @default(PUBLISHED)
    tenantId  Int
    ownerId   Int
    clientId  Int
    startdate DateTime
    enddate   DateTime?
    billing   BillingType     @default(NON_BILLABLE)
    interval  ProjectInterval
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    milestone  Milestone[]
    task       Task[]
    timeEntry  TimeEntry[]
    allocation Allocation[]
    tenant     Tenant       @relation(fields: [tenantId], references: [id])
    client     Client       @relation(fields: [clientId], references: [id])
    //TODO: add owner relation

    @@index([tenantId])
    @@index([clientId])
}

enum ProjectInterval {
    FIXED
    WEEKLY
    MONTHLY
    QUARTERLY
    HALFYEARLY
    YEARLY
}

// might not be used
enum BillingType {
    BILLABLE
    NON_BILLABLE
}

enum Role {
    OWNER
    MANAGER
    REGULAR
}

model Milestone {
    id        Int      @id @default(autoincrement())
    tenantId  Int
    projectId Int
    name      String
    budget    Float
    status    Status   @default(PUBLISHED)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    startDate DateTime
    endDate   DateTime

    // TODO: Invoice Number reciprocal to be added to get Invoiced / Un-Invoiced Hours (INV-1234)

    tenant  Tenant  @relation(fields: [tenantId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@index([tenantId])
    @@index([projectId])
}

model Task {
    id        Int      @id @default(autoincrement())
    tenantId  Int
    name      String
    status    Status   @default(PUBLISHED)
    budget    Int
    projectId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tenant  Tenant  @relation(fields: [tenantId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@index([tenantId])
    @@index([projectId])
}

model TimeEntry {
    id         Int         @id @default(autoincrement())
    projectId  Int
    tenantId   Int
    type       BillingType
    time       Int
    comments   String?
    approved   Boolean     @default(false)
    approvedBy String?
    approvedAt DateTime?
    status     Status      @default(PUBLISHED)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    tenant  Tenant  @relation(fields: [tenantId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@index([tenantId])
    @@index([projectId])
}

model UserRole {
    id        Int      @id @default(autoincrement())
    role      Role     @default(REGULAR)
    userId    Int
    tenantId  Int
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([role, userId, tenantId])
    @@index([userId])
    @@index([tenantId])
    @@index([userId, tenantId]) // Added an index on both fields to optimize queries involving both fields
}

enum Status {
    PUBLISHED
    ARCHIVED
}

enum UserStatus {
    ACTIVE
    INACTIVE
}

enum AllocationFrequency {
    DAY
    ONGOING
}

model Allocation {
    id          Int       @id @default(autoincrement())
    date        DateTime
    enddate     DateTime?
    billable    Int       @default(0)
    nonbillable Int       @default(0)
    tenantId    Int
    status      Status    @default(PUBLISHED)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // If frequency is ONGOING and no enddate then it's indefinite
    // If the frequency is ONGOING and enddate is present then it's a fixed duration
    frequency AllocationFrequency @default(DAY)

    tenant Tenant @relation(fields: [tenantId], references: [id])

    users    User[]
    projects Project[]

    @@index([tenantId])
}

model UserTags {
    id        Int      @id @default(autoincrement())
    name      String
    tenantId  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    Int?

    tenant Tenant @relation(fields: [tenantId], references: [id])
    user   User?  @relation(fields: [userId], references: [id])

    @@index([tenantId])
    @@index([userId])
}

model User {
    id            Int        @id @default(autoincrement())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    allocationId  Int?
    status        UserStatus @default(ACTIVE)

    allocation Allocation? @relation(fields: [allocationId], references: [id])

    tenantId Tenant[]   @relation("UserTenants")
    userTags UserTags[]
    accounts Account[]
    sessions Session[]
    roles    UserRole[]

    // @@index([tenantId])
    @@index([allocationId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}
