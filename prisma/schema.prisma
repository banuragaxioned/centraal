// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tenant {
    id        String      @id @default(cuid())
    name      String
    status    Status      @default(ACTIVE)
    users     User[]
    client    Client[]
    project   Project[]
    milestone Milestone[]
    task      Task[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model Client {
    id        String      @id @default(cuid())
    name      String
    tenantId  String
    tenant    Tenant      @relation(fields: [tenantId], references: [id])
    status    Status      @default(ACTIVE)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    Project   Project[]
    milestone Milestone[]
    task      Task[]

    @@index([tenantId])
}

model Project {
    id        String          @id @default(cuid())
    name      String
    status    Status          @default(ACTIVE)
    tenantId  String
    tenant    Tenant          @relation(fields: [tenantId], references: [id])
    clientId  String
    client    Client          @relation(fields: [clientId], references: [id])
    milestone Milestone[]
    task      Task[]
    startdate DateTime
    enddate   DateTime?
    type      ProjectType     @default(FIXED)
    billing   BillingType     @default(NON_BILLABLE)
    interval  ProjectInterval
    members   User[]
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    @@index([tenantId])
    @@index([clientId])
}

enum ProjectInterval {
    TIMEBOUND
    WEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
}

enum ProjectType {
    FIXED
    HOURLY
}

enum BillingType {
    BILLABLE
    NON_BILLABLE
}

enum Role {
    OWNER
    MANAGER
    REGULAR
}

model Milestone {
    id        String   @id @default(cuid())
    name      String
    budget    Float
    status    Status   @default(ACTIVE)
    tenantId  String
    tenant    Tenant   @relation(fields: [tenantId], references: [id])
    clientId  String
    client    Client   @relation(fields: [clientId], references: [id])
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    task      Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([tenantId])
    @@index([clientId])
    @@index([projectId])
}

model Task {
    id          String    @id @default(cuid())
    name        String
    status      Status    @default(ACTIVE)
    budget      Float
    tenantId    String
    tenant      Tenant    @relation(fields: [tenantId], references: [id])
    clientId    String
    client      Client    @relation(fields: [clientId], references: [id])
    projectId   String
    project     Project   @relation(fields: [projectId], references: [id])
    milestoneId String
    milestone   Milestone @relation(fields: [milestoneId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([tenantId])
    @@index([clientId])
    @@index([projectId])
    @@index([milestoneId])
}

model UserRole {
    id        String   @id @default(cuid())
    role      Role     @default(REGULAR)
    userId    String
    tenantId  String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([role, userId, tenantId])
    @@index([userId])
    @@index([tenantId])
    @@index([userId, tenantId]) // Added an index on both fields to optimize queries involving both fields
}

enum Status {
    ACTIVE
    ARCHIVED
}

enum UserStatus {
    ACTIVE
    INACTIVE
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    status        UserStatus @default(ACTIVE)
    accounts      Account[]
    sessions      Session[]
    tenant        Tenant?    @relation(fields: [tenantId], references: [id])
    roles         UserRole[]
    tenantId      String?
    project       Project?   @relation(fields: [projectId], references: [id])
    projectId     String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt

    @@index([tenantId])
    @@index([projectId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}
