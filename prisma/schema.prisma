// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Workspace {
  id             Int              @id @default(autoincrement())
  name           String
  slug           String           @unique
  status         Status           @default(PUBLISHED)
  domain         String?          @unique
  domainVerified Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Client         Client[]
  Project        Project[]
  Milestone      Milestone[]
  Task           Task[]
  TimeEntry      TimeEntry[]
  group          Group[]
  Allocation     Allocation[]
  Skill          Skill[]
  SkillScore     SkillScore[]
  users          UserWorkspace[]
  UserOnGroup    UserOnGroup[]
  UsersOnProject UsersOnProject[]
}

model Client {
  id          Int       @id @default(autoincrement())
  name        String
  workspaceId Int
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status      Status    @default(PUBLISHED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Project     Project[]

  @@index([workspaceId])
}

model Project {
  id             Int              @id @default(autoincrement())
  workspaceId    Int
  Workspace      Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name           String
  status         Status           @default(PUBLISHED)
  ownerId        Int
  Owner          User             @relation("UserOwnedProjects", fields: [ownerId], references: [id])
  clientId       Int
  Client         Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  startdate      DateTime
  enddate        DateTime?
  budget         Int?
  billable       Boolean          @default(false)
  interval       ProjectInterval
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Milestone      Milestone[]
  Task           Task[]
  TimeEntry      TimeEntry[]
  Allocation     Allocation[]
  UsersOnProject UsersOnProject[]

  @@index([workspaceId])
  @@index([clientId])
  @@index([ownerId])
}

model UsersOnProject {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      Status    @default(PUBLISHED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, projectId])
  @@index([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([workspaceId])
}

enum ProjectInterval {
  FIXED
  MONTHLY
}

enum Role {
  OWNER
  MANAGER
  USER
  INACTIVE
}

model Milestone {
  id          Int         @id @default(autoincrement())
  workspaceId Int
  Workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId   Int
  Project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  budget      Int         @default(0) // Storing budget in hours
  status      Status      @default(PUBLISHED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  startDate   DateTime?
  endDate     DateTime?
  TimeEntry   TimeEntry[]

  @@index([workspaceId])
  @@index([projectId])
}

model Task {
  id          Int         @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  status      Status      @default(PUBLISHED)
  budget      Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  TimeEntry   TimeEntry[]

  @@index([workspaceId])
  @@index([projectId])
}

model TimeEntry {
  id          Int       @id @default(autoincrement())
  date        DateTime
  workspaceId Int
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId   Int
  Project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      Int
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestoneId Int
  Milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  taskId      Int?
  Task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  billable    Boolean   @default(false)
  time        Int // Storing time in minutes
  comments    String?
  status      Status    @default(PUBLISHED)
  approved    Boolean   @default(false)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId, projectId, userId, milestoneId, taskId])
  @@index([workspaceId, projectId])
  @@index([workspaceId, userId])
  @@index([workspaceId, milestoneId])
  @@index([milestoneId])
  @@index([taskId])
  @@index([userId])
  @@index([projectId])
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
  DEACTIVATED
}

// Allocation-related
model Allocation {
  id              Int                 @id @default(autoincrement())
  workspaceId     Int
  Workspace       Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId       Int
  Project         Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId          Int
  User            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  date            DateTime
  enddate         DateTime?
  billableTime    Int
  nonBillableTime Int
  status          Status              @default(PUBLISHED)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  // If frequency is ONGOING and no enddate then it's indefinite
  // If the frequency is ONGOING and enddate is present then it's a fixed duration
  frequency       AllocationFrequency @default(DAY)

  @@index([workspaceId])
  @@index([projectId])
  @@index([userId])
  @@index([workspaceId, projectId, userId])
}

enum AllocationFrequency {
  DAY
  ONGOING
}

model SkillScore {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      Int
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillId     Int
  Skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  level       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
  @@index([skillId])
  @@index([userId])
}

model Skill {
  id          Int          @id @default(autoincrement())
  workspaceId Int
  Workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  SkillScore  SkillScore[]

  @@index([workspaceId])
}

model UserWorkspace {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role      @default(USER)
  status      Status    @default(PUBLISHED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
  @@index([userId, workspaceId, role])
  @@index([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
}

model Group {
  id          Int           @id @default(autoincrement())
  workspaceId Int
  Workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserOnGroup UserOnGroup[]

  @@index([workspaceId])
}

model UserOnGroup {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      Status    @default(PUBLISHED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, userId, groupId])
  @@index([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@index([workspaceId])
}

// NextAuth-related
model User {
  id             Int              @id @default(autoincrement())
  name           String?
  email          String           @unique
  timezone       String           @default("Etc/UTC")
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  status         Status           @default(PUBLISHED)
  accounts       Account[]
  sessions       Session[]
  Allocation     Allocation[]
  SkillScore     SkillScore[]
  TimeEntry      TimeEntry[]
  OwnedProjects  Project[]        @relation("UserOwnedProjects")
  workspaces     UserWorkspace[]
  UserOnGroup    UserOnGroup[]
  UsersOnProject UsersOnProject[]
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}
