// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tenant {
    id        String         @id @default(cuid())
    name      String
    users     User[]
    UserRole  UserRole[]
    Client    Client[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    status    DocumentStatus @default(ACTIVE)
    Project   Project[]
}

model Client {
    id        String         @id @default(cuid())
    name      String
    tenantId  String
    tenant    Tenant         @relation(fields: [tenantId], references: [id])
    users     User[]
    status    DocumentStatus @default(ACTIVE)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@index([tenantId])
}

model Project {
    id        String         @id @default(cuid())
    name      String
    tenantId  String
    tenant    Tenant         @relation(fields: [tenantId], references: [id])
    status    DocumentStatus @default(ACTIVE)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@index([tenantId])
}

enum Role {
    OWNER
    MANAGER
    REGULAR
}

model UserRole {
    id        String   @id @default(cuid())
    role      Role     @default(REGULAR)
    userId    String
    tenantId  String
    tenant    Tenant   @relation(fields: [tenantId], references: [id])
    User      User     @relation(fields: [userId], references: [id])
    clientId  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([role, userId, tenantId])
    @@index([userId])
    @@index([tenantId])
    @@index([userId, tenantId]) // Added an index on both fields to optimize queries involving both fields
}

enum DocumentStatus {
    ACTIVE
    ARCHIVED
}

enum UserStatus {
    ACTIVE
    INACTIVE
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    tenant        Tenant?    @relation(fields: [tenantId], references: [id])
    roles         UserRole[]
    tenantId      String?
    status        UserStatus @default(ACTIVE)
    Client        Client?    @relation(fields: [clientId], references: [id])
    clientId      String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt

    @@index([tenantId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}
